/**
 * Generated by orval v6.24.0 üç∫
 * Do not edit manually.
 * Hermes
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  Linking200,
  Linking400,
  LinkingBody,
  ValidationExceptionResponse
} from '../../models'

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;



export const linking = (
    linkingToken: string,
    linkingBody: LinkingBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Linking200>> => {
    
    return axios.post(
      `/link-app/${linkingToken}`,
      linkingBody,options
    );
  }



export const getLinkingMutationOptions = <TError = AxiosError<Linking400 | ValidationExceptionResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof linking>>, TError,{linkingToken: string;data: LinkingBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof linking>>, TError,{linkingToken: string;data: LinkingBody}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof linking>>, {linkingToken: string;data: LinkingBody}> = (props) => {
          const {linkingToken,data} = props ?? {};

          return  linking(linkingToken,data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type LinkingMutationResult = NonNullable<Awaited<ReturnType<typeof linking>>>
    export type LinkingMutationBody = LinkingBody
    export type LinkingMutationError = AxiosError<Linking400 | ValidationExceptionResponse>

    export const useLinking = <TError = AxiosError<Linking400 | ValidationExceptionResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof linking>>, TError,{linkingToken: string;data: LinkingBody}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getLinkingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    